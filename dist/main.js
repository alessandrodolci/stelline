!function(t){var e={};function i(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,o){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(o,n,function(e){return t[e]}.bind(null,n));return o},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function o(t,e,i,o){this.x=t,this.y=e,this.size=i,this.visible=o}i.r(e),i.d(e,"getNewStars",(function(){return z}));const n=document.getElementById("stars"),s=n.getContext("2d");function r(t,e){o.call(this,t,e,30,!0),this.shots=[]}r.prototype=Object.create(o.prototype),r.prototype.constructor=r;const h=t=>.02*(n.width/2-t);function a(t,e,i,n){o.call(this,t,e,4,null),this.targetX=i,this.targetY=n,this.hit=!1}r.prototype.setPosition=function(t,e){this.x=t,this.y=e},r.prototype.resetSize=function(){this.size=30},r.prototype.getNoseXCoordinate=function(){return this.x},r.prototype.getNoseYCoordinate=function(){return this.y-this.size/2},r.prototype.getLeftWingXCoordinate=function(){return this.x-this.size-h(this.x)},r.prototype.getRightWingXCoordinate=function(){return this.x+this.size-h(this.x)},r.prototype.getWingsYCoordinate=function(){return this.y+this.size/4},r.prototype.getTopXCoordinate=function(){return this.x-h(this.x)},r.prototype.getTopYCoordinate=function(){return this.y-this.size/8},r.prototype.getRearXCoordinate=function(){return this.x-h(this.x)},r.prototype.getRearYCoordinate=function(){return this.y+this.size/3},r.prototype.moveVertically=function(t){const e=n.width/2-this.x,i=n.height/2-this.y,o=Math.atan2(i,e);this.x-=t*Math.cos(o),this.y>n.height/2&&(this.y-=t*Math.sin(o),this.size+=t/20)},r.prototype.moveHorizontally=function(t){this.x+=t},r.prototype.draw=function(){s.beginPath(),s.moveTo(this.getLeftWingXCoordinate(),this.getWingsYCoordinate()),s.lineTo(this.getNoseXCoordinate(),this.getNoseYCoordinate()),s.lineTo(this.getRightWingXCoordinate(),this.getWingsYCoordinate()),s.lineTo(this.getRearXCoordinate(),this.getRearYCoordinate()),s.lineTo(this.getLeftWingXCoordinate(),this.getWingsYCoordinate()),s.moveTo(this.getTopXCoordinate(),this.getTopYCoordinate()),s.lineTo(this.getLeftWingXCoordinate(),this.getWingsYCoordinate()),s.moveTo(this.getTopXCoordinate(),this.getTopYCoordinate()),s.lineTo(this.getRightWingXCoordinate(),this.getWingsYCoordinate()),s.moveTo(this.getTopXCoordinate(),this.getTopYCoordinate()),s.lineTo(this.getNoseXCoordinate(),this.getNoseYCoordinate()),s.closePath(),s.strokeStyle="white",s.lineWidth=1.5,s.stroke()},r.prototype.fireShot=function(t,e){this.shots.push(new a(this.getNoseXCoordinate(),this.getNoseYCoordinate(),t,e))},a.prototype=Object.create(o.prototype),a.prototype.constructor=a,a.prototype.draw=function(){s.beginPath(),s.ellipse(this.x,this.y,this.size/2,this.size/2,0,0,2*Math.PI),s.closePath(),s.fillStyle="grey",s.fill()};const l=document.getElementById("stars").getContext("2d");function c(t,e){const i=3.3*Math.random()+.2;o.call(this,t,e,i,!1),this.initialX=t,this.initialY=e,this.vx=Math.min(1,this.size/2)*(Math.random()-.5),this.vy=Math.min(1,this.size/2)*(Math.random()-.5)}c.prototype=Object.create(o.prototype),c.prototype.constructor=c,c.prototype.move=function(t=1){this.x+=this.vx*t,this.y+=this.vy*t},c.prototype.scale=function(t=1){this.size<7&&(this.size+=.002*this.size*t),this.vx+=.008*this.vx*t,this.vy+=.008*this.vy*t},c.prototype.draw=function(){l.beginPath(),l.ellipse(this.x,this.y,this.size/2,this.size/2,0,0,2*Math.PI),l.closePath(),l.fillStyle="white",l.fill()};const d=document.getElementById("stars"),g=d.getContext("2d");let y=0,p=!1;const u=(t,e)=>e.x-t.x<e.size&&e.x-t.x>-e.size&&e.y-t.y<e.size/2&&e.y-t.y>-e.size/2&&t.visible,f=(t,e)=>e.x-t.x<t.size&&e.x-t.x>-t.size&&e.y-t.y<t.size&&e.y-t.y>-t.size&&t.visible,m=(t,e)=>{e.visible=!p;for(let t=0;t<e.shots.length;t++)e.shots[t].hit=p;for(let e=0;e<t.length;e++)t[e].visible=!p},w=(t,e)=>{p=!0,m(t,e),g.fillStyle="white",g.textAlign="center",g.font="60px monospace",g.fillText("GAME OVER",d.width/2,d.height/2),g.font="38px monospace",g.fillText("Tap to restart",d.width/2,d.height/2+80),d.addEventListener("pointerup",()=>{p=!1,m(t,e),t=z(),e.resetSize(),e.setPosition(d.width/2,d.height/6*5),x(e,t)},{once:!0})},v=(t,e)=>{((t,e)=>{for(let i=0;i<t.length;i++){const o=t[i];u(o,e)&&(e.visible=!1,w(t,e))}})(t,e),((t,e)=>{for(let i=0;i<t.length;i++){let o=t[i];for(let n=0;n<e.length;n++){const s=e[n];f(o,s)&&(s.hit=!0,t[i]=new c(d.width/2,d.height/3),t[i].move(Math.random()*(d.width/6)))}}})(t,e.shots)},x=(t,e)=>{g.clearRect(0,0,d.width,d.height),g.fillStyle="white",g.textAlign="left",g.font="24px mono",g.fillText("SCORE: "+y,10,30),(t=>{for(let e=0;e<t.length;e++){let i=t[e];i.visible?i.draw():Math.random()>.1&&(i.visible=!0),i.move(),i.x>d.width-i.size||i.x<i.size||i.y>d.height-i.size||i.y<i.size?(i.y>d.height-i.size&&y++,t[e]=new c(d.width/2,d.height/3),t[e].move(Math.random()*(d.width/6))):i.scale()}})(e),t.visible&&t.draw(),t.shots=t.shots.filter(t=>((t=>{t.y=t.y-4,0===t.y&&(t.hit=!0),t.draw()})(t),!t.hit)),v(e,t),p||window.requestAnimationFrame(()=>x(t,e))};function z(){const t=[];for(let e=0;e<200;e++){const e=new c(C.width/2,C.height/3);e.move(Math.random()*(C.width/3)),t.push(e)}return t}const C=document.getElementById("stars");C.width=window.innerWidth,C.height=window.innerHeight;const b=z(),T=new r(C.width/2,C.height/6*5);var M;M=T,window.onkeydown=t=>{switch(t.key){case"ArrowLeft":case"KeyA":M.moveHorizontally(-1);break;case"ArrowRight":case"KeyD":M.moveHorizontally(1);break;case"ArrowUp":case"KeyW":M.moveVertically(-.4);break;case"ArrowDown":case"KeyS":M.moveVertically(.4);break;case"KeyZ":M.fireShot()}},function(){let t=!1;return"maxTouchPoints"in navigator?t=navigator.maxTouchPoints>0:"msMaxTouchPoints"in navigator&&(t=navigator.msMaxTouchPoints>0),t}()||(window.onwheel=t=>{M.moveHorizontally(t.deltaX),M.moveVertically(t.deltaY)}),window.onclick=t=>{M.fireShot(t.clientX,t.clientY)},(t=>{const e=(t,e,i)=>Math.min(Math.max(t,e),i);let i=0,o=0;window.addEventListener("deviceorientation",t=>{i=e(t.beta,-90,90),o=t.gamma},{once:!0}),window.addEventListener("deviceorientation",n=>{const s=e(n.beta-i,-90,90),r=n.gamma-o;t.moveHorizontally(r/20),t.moveVertically(s/10)})})(T),window.requestAnimationFrame(()=>x(T,b))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,