!function(t){var e={};function i(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,o){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(o,n,function(e){return t[e]}.bind(null,n));return o},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";function o(t,e,i,o){this.x=t,this.y=e,this.size=i,this.visible=o}i.r(e),i.d(e,"getNewStars",(function(){return v}));const n=document.getElementById("stars"),s=n.getContext("2d");function r(t,e){o.call(this,t,e,30,!0),this.shots=[]}function h(t,e,i,n){o.call(this,t,e,4,null),this.targetX=i,this.targetY=n,this.hit=!1}r.prototype=Object.create(o.prototype),r.prototype.constructor=r,r.prototype.setPosition=function(t,e){this.x=t,this.y=e},r.prototype.resetSize=function(){this.size=30},r.prototype.getNoseXCoordinate=function(){return this.x},r.prototype.getNoseYCoordinate=function(){return this.y-this.size/2},r.prototype.getLeftWingXCoordinate=function(){return this.x-this.size},r.prototype.getRightWingXCoordinate=function(){return this.x+this.size},r.prototype.getWingsYCoordinate=function(){return this.y+this.size/4},r.prototype.getTopXCoordinate=function(){return this.x},r.prototype.getTopYCoordinate=function(){return this.y-this.size/8},r.prototype.getRearXCoordinate=function(){return this.x},r.prototype.getRearYCoordinate=function(){return this.y+this.size/3},r.prototype.moveVertically=function(t){const e=n.width/2-this.x,i=n.height/2-this.y,o=Math.atan2(i,e);this.x-=t*Math.cos(o),this.y>n.height/2&&(this.y-=t*Math.sin(o),this.size+=t/20)},r.prototype.moveHorizontally=function(t){this.x+=t},r.prototype.draw=function(){const t=2*this.getTopXCoordinate()/n.width-1;s.setTransform(new DOMMatrix([1,0,t,1,0,0])),s.beginPath(),s.moveTo(this.getLeftWingXCoordinate(),this.getWingsYCoordinate()),s.lineTo(this.getNoseXCoordinate(),this.getNoseYCoordinate()),s.lineTo(this.getRightWingXCoordinate(),this.getWingsYCoordinate()),s.lineTo(this.getRearXCoordinate(),this.getRearYCoordinate()),s.lineTo(this.getLeftWingXCoordinate(),this.getWingsYCoordinate()),s.moveTo(this.getTopXCoordinate(),this.getTopYCoordinate()),s.lineTo(this.getLeftWingXCoordinate(),this.getWingsYCoordinate()),s.moveTo(this.getTopXCoordinate(),this.getTopYCoordinate()),s.lineTo(this.getRightWingXCoordinate(),this.getWingsYCoordinate()),s.moveTo(this.getTopXCoordinate(),this.getTopYCoordinate()),s.lineTo(this.getNoseXCoordinate(),this.getNoseYCoordinate()),s.closePath(),s.strokeStyle="white",s.lineWidth=1.5,s.stroke(),s.setTransform()},r.prototype.fireShot=function(t,e){this.shots.push(new h(this.getNoseXCoordinate(),this.getNoseYCoordinate(),t,e))},h.prototype=Object.create(o.prototype),h.prototype.constructor=h,h.prototype.draw=function(){s.beginPath(),s.ellipse(this.x,this.y,this.size/2,this.size/2,0,0,2*Math.PI),s.closePath(),s.fillStyle="grey",s.fill()};const a=document.getElementById("stars").getContext("2d");function l(t,e){const i=3.3*Math.random()+.2;o.call(this,t,e,i,!1),this.initialX=t,this.initialY=e,this.vx=Math.min(1,this.size/2)*(Math.random()-.5),this.vy=Math.min(1,this.size/2)*(Math.random()-.5)}l.prototype=Object.create(o.prototype),l.prototype.constructor=l,l.prototype.move=function(t=1){this.x+=this.vx*t,this.y+=this.vy*t},l.prototype.scale=function(t=1){this.size<7&&(this.size+=.002*this.size*t),this.vx+=.008*this.vx*t,this.vy+=.008*this.vy*t},l.prototype.draw=function(){a.beginPath(),a.ellipse(this.x,this.y,this.size/2,this.size/2,0,0,2*Math.PI),a.closePath(),a.fillStyle="white",a.fill()};const c=document.getElementById("stars"),d=c.getContext("2d");let g=0,y=!1;const p=(t,e)=>e.x-t.x<e.size&&e.x-t.x>-e.size&&e.y-t.y<e.size/2&&e.y-t.y>-e.size/2&&!0===t.visible,u=(t,e)=>{e.visible=!y;for(let t=0;t<e.shots.length;t++)e.shots[t].hit=y;for(let e=0;e<t.length;e++)t[e].visible=!y},f=(t,e)=>{y=!0,u(t,e),d.fillStyle="white",d.textAlign="center",d.font="60px monospace",d.fillText("GAME OVER",c.width/2,c.height/2),d.font="38px monospace",d.fillText("Tap to restart",c.width/2,c.height/2+80),c.addEventListener("pointerup",()=>{y=!1,u(t,e),t=v(),e.resetSize(),e.setPosition(c.width/2,c.height/6*5),w(e,t)},{once:!0})},m=(t,e)=>{((t,e)=>{for(let i=0;i<t.length;i++){const o=t[i];p(o,e)&&(e.visible=!1,f(t,e))}})(t,e),((t,e)=>{for(let i=0;i<t.length;i++){let o=t[i];for(let n=0;n<e.length;n++){const s=e[n];s.x-o.x<o.size&&s.x-o.x>-o.size&&s.y-o.y<o.size&&s.y-o.y>-o.size&&!0===o.visible&&(s.hit=!0,o=t.splice(i,1,new l(c.width/2,c.height/3))[0],o.move(Math.random()*(c.width/3)))}}})(t,e.shots)},w=(t,e)=>{d.clearRect(0,0,c.width,c.height),d.fillStyle="white",d.textAlign="left",d.font="24px mono",d.fillText("SCORE: "+g,10,30),(t=>{for(let e=0;e<t.length;e++){let i=t[e];i.visible?i.draw():Math.random()>.1&&(i.visible=!0),i.move(),i.x>c.width-i.size||i.x<i.size||i.y>c.height-i.size||i.y<i.size?(i.y>c.height-i.size&&g++,i=t.splice(e,1,new l(c.width/2,c.height/3))[0],i.move(Math.random()*(c.width/3))):i.scale()}})(e),t.visible&&t.draw(),t.shots=t.shots.filter(t=>((t=>{t.y=t.y-4,0===t.y&&(t.hit=!0),t.draw()})(t),!t.hit)),m(e,t),y||window.requestAnimationFrame(()=>w(t,e))};function v(){const t=[];for(let e=0;e<200;e++){const e=new l(x.width/2,x.height/3);e.move(Math.random()*(x.width/3)),t.push(e)}return t}const x=document.getElementById("stars");x.width=window.innerWidth,x.height=window.innerHeight;const z=v(),C=new r(x.width/2,x.height/6*5);var b;b=C,window.onkeydown=t=>{switch(t.key){case"ArrowLeft":case"KeyA":b.moveHorizontally(-1);break;case"ArrowRight":case"KeyD":b.moveHorizontally(1);break;case"ArrowUp":case"KeyW":b.moveVertically(-.4);break;case"ArrowDown":case"KeyS":b.moveVertically(.4);break;case"KeyZ":b.fireShot()}},function(){let t=!1;return"maxTouchPoints"in navigator?t=navigator.maxTouchPoints>0:"msMaxTouchPoints"in navigator&&(t=navigator.msMaxTouchPoints>0),t}()||(window.onwheel=t=>{b.moveHorizontally(t.deltaX),b.moveVertically(t.deltaY)}),window.onclick=t=>{b.fireShot(t.clientX,t.clientY)},((t,e)=>{const i=(t,e,i)=>Math.min(Math.max(t,e),i);let o=0,n=0;window.addEventListener("deviceorientation",t=>{o=i(t.beta,-90,90),n=t.gamma},{once:!0}),window.addEventListener("deviceorientation",s=>{const r=i(s.beta-o,-90,90),h=s.gamma-n;t.moveHorizontally(h/40),t.moveVertically(r/20);for(let t=0;t<e.length;t++)e[t].x-=h/5,e[t].y+=r/5})})(C,z),window.requestAnimationFrame(()=>w(C,z))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,